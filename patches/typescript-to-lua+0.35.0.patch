diff --git a/node_modules/typescript-to-lua/dist/LuaPrinter.js b/node_modules/typescript-to-lua/dist/LuaPrinter.js
index 5efaeba..4402aab 100644
--- a/node_modules/typescript-to-lua/dist/LuaPrinter.js
+++ b/node_modules/typescript-to-lua/dist/LuaPrinter.js
@@ -580,7 +580,7 @@ let LuaPrinter = /** @class */ (() => {
         // will not generate 'empty' mappings in the source map that point to nothing in the original TS.
         buildSourceMap(sourceRoot, rootSourceNode) {
             const map = new source_map_1.SourceMapGenerator({
-                file: utils_1.trimExtension(this.sourceFile) + ".lua",
+                file: utils_1.trimExtension(this.sourceFile) + (this.options.trimExtensions === true && /.*\..*\.ts$/.test(this.sourceFile) ?  "" : ".lua"),
                 sourceRoot,
             });
             let generatedLine = 1;
diff --git a/node_modules/typescript-to-lua/dist/cli/parse.js b/node_modules/typescript-to-lua/dist/cli/parse.js
index 811a8ad..3a8da50 100644
--- a/node_modules/typescript-to-lua/dist/cli/parse.js
+++ b/node_modules/typescript-to-lua/dist/cli/parse.js
@@ -48,6 +48,11 @@ exports.optionDeclarations = [
         description: "List of TypeScriptToLua plugins.",
         type: "object",
     },
+    {
+        name: "trimExtensions",
+        description: "Do not add .lua to the files when emitting, i.e. file.script.ts -> file.script when compiled",
+        type: "boolean",
+    },
 ];
 function updateParsedConfigFile(parsedConfigFile) {
     let hasRootLevelOptions = false;
diff --git a/node_modules/typescript-to-lua/dist/transpilation/transpiler.js b/node_modules/typescript-to-lua/dist/transpilation/transpiler.js
index de4c40f..664b30e 100644
--- a/node_modules/typescript-to-lua/dist/transpilation/transpiler.js
+++ b/node_modules/typescript-to-lua/dist/transpilation/transpiler.js
@@ -46,7 +46,7 @@ class Transpiler {
         else {
             emitPlan = files.map(file => {
                 const pathInOutDir = path.resolve(outDir, path.relative(rootDir, file.fileName));
-                const outputPath = utils_1.normalizeSlashes(utils_1.trimExtension(pathInOutDir) + ".lua");
+                const outputPath = utils_1.normalizeSlashes(utils_1.trimExtension(pathInOutDir) + (options.trimExtensions === true && /.*\..*\.ts$/.test(pathInOutDir) ?  "" : ".lua"));
                 return { ...file, outputPath };
             });
         }
